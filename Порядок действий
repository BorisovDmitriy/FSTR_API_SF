1. Создали репо на гите
2. Клонировали к себе
3. Создали виртулальное окружение и активировали его
4. Устанавливаем
-- FastApi
-- Uvicorn
5. Подключаем PostgresSQL, проверил что сервер запущен, в PGAdmin сервер слушается.
6. доустановить:
--SQLAlchemy
--psycopg2-binary
!!!!Сначало создать папку sql_app  c пустым файлом __init__ и помещать туда файлы как в проекте!!!!!
7. Создаем файл database.py, нам понадобиться данные БД заложенные в переменное окружение.
Для этого устанавливаем dotenv(pip install python-dotenv) почитать про pip install -r requrements.txt
8. Создаем файл models.py,  пишем БД
9. Создаем schemas.py и заполняем
Пока кроме кортинок и все для запроса Post
10.0
-Устанавливаем Alembic  pip install alembic
-Создаем среду &:alembic init alembic
-Правим файл alembic.ini (строки 58,)
-Создайте сценарий миграции alembic revision -m "create account table"
-Переходим в файл alembic/env.py добавляем привязки к нашей базе.
Создаем файл base.py для env.py
Правим 17строку,22,58-61,
Изменения файла env.py нужны для автогенерации миграций в БД.
-Делаем первую миграцию $ alembic upgrade head
-Выполняем требование к автогенерации alembic revision --autogenerate -m "Added account table"
10. Создаем crud.py и заполняем его
11. Создаем файл errors, описываем ErrorConnectionServer
12. Описываем Post запрос в файле main,   Необходимо добиться работы БД и FastApi.
Сначало без alemblic.
13. Отправляем в гит, без картинок

 Спринт 2
1. Реализуем добавление картинок, models, schemas, crud, main снял коментарии с заготовок
2. Реализуем GET /submitData/<id> — получить одну запись (перевал) по её id.
Выведи всю информацию об объекте, в том числе статус модерации.
3. GET /submitData/?user__email=<email> — список данных обо всех объектах, которые пользователь
с почтой <email> отправил на сервер.
4.PATCH /submitData/<id> — отредактировать существующую запись (замена), если она в статусе new.
Редактировать можно все поля, кроме тех, что содержат в себе ФИО, адрес почты и номер телефона. Метод принимает тот же самый json, который принимал уже реализованный тобой метод submitData.
В качестве результата верни два значения:
        state:
                1 — если успешно удалось отредактировать запись в базе данных.
                0 — в противном случае.
        message — если обновить запись не удалось, напиши почему.
Добавляем функцию в Models, Schemas, Crud, Main

Спринт 3
1. Оформляем код (отступы, пробелы, синтаксис)
-- пытаемся написать тесты в Main и crud,
2. Добавляем описание к функциям
3. Оформляем Redmyfile
4. Исправил время
$ uvicorn sql_app.main:app --reload  тестим!!!
5. Github